/*
 * Copyright 2021 Harness Inc. All rights reserved.
 * Use of this source code is governed by the PolyForm Shield 1.0.0 license
 * that can be found in the licenses directory at the root of this repository, also available at
 * https://polyformproject.org/wp-content/uploads/2020/06/PolyForm-Shield-1.0.0.txt.
 */

export const PipelineResponse = {
  status: 'SUCCESS',
  data: {
    ngPipeline: {
      pipeline: {
        name: 'test-p1',
        identifier: 'editPipeline',
        description: 'my pipeline',
        tags: null,
        variables: null,
        metadata: null
      }
    },
    executionsPlaceHolder: [],
    yamlPipeline:
      'pipeline:\n  name: test-p1\n  identifier: testp1\n  description: my pipeline\n  stages:\n    - stage:\n        name: stage1\n        identifier: stage1\n        description: ""\n        type: Deployment\n        spec:\n          service:\n            identifier: loginsvc\n            name: login-svc\n            description: login service\n            serviceDefinition:\n              type: Kubernetes\n              spec:\n                artifacts:\n                  sidecars:\n                    - sidecar:\n                        type: Dockerhub\n                        identifier: side1\n                        spec:\n                          connectorRef: account.dockerTesting\n                          imagePath: <+input>\n                    - sidecar:\n                        type: Dockerhub\n                        identifier: side2\n                        spec:\n                          connectorRef: account.dockerTesting\n                          imagePath: <+input>\n                  primary:\n                    type: Dockerhub\n                    spec:\n                      connectorRef: account.dockerTesting\n                      imagePath: <+input>\n                manifests:\n                  - manifest:\n                      identifier: man1\n                      type: K8sManifest\n                      spec:\n                        store:\n                          type: Git\n                          spec:\n                            connectorRef: account.sampelgit\n                            gitFetchType: Branch\n                            branch: <+input>\n                            commitId: ""\n                            paths:\n                              - <+input>\n                artifactOverrideSets:\n                  - overrideSet:\n                      identifier: over1\n                      artifacts:\n                        primary:\n                          type: Dockerhub\n                          spec:\n                            connectorRef: account.dockerTesting\n                            imagePath: <+input>\n                        sidecars:\n                          - sidecar:\n                              type: Dockerhub\n                              identifier: side1\n                              spec:\n                                connectorRef: account.dockerTesting\n                                imagePath: <+input>\n                manifestOverrideSets:\n                  - overrideSet:\n                      identifier: over2\n                      manifests:\n                        - manifest:\n                            identifier: man2\n                            type: Values\n                            spec:\n                              store:\n                                type: Git\n                                spec:\n                                  connectorRef: account.sampelgit\n                                  gitFetchType: Commit\n                                  branch: ""\n                                  commitId: <+input>\n                                  paths:\n                                    - <+input>\n          infrastructure:\n            environment:\n              name: prod1\n              identifier: prod1\n              description: ""\n              type: PreProduction\n            infrastructureDefinition:\n              type: KubernetesDirect\n              spec:\n                connectorRef: <+input>\n                namespace: <+input>.allowedValues(harness)\n                releaseName: <+input>.regex(harness*)\n          execution:\n            steps:\n              - step:\n                  name: Rollout Deployment\n                  identifier: rolloutDeployment\n                  type: K8sRollingDeploy\n                  spec:\n                    timeout: 10m\n                    skipDryRun: true\n            rollbackSteps:\n              - step:\n                  name: Rollback Rollout Deployment\n                  identifier: rollbackRolloutDeployment\n                  type: K8sRollingRollback\n                  spec:\n                    timeout: 10m\n    - stage:\n        name: stage2\n        identifier: stage2\n        description: ""\n        type: Deployment\n        spec:\n          service:\n            identifier: loginsvc\n            name: login-svc\n            description: login service\n            serviceDefinition:\n              type: Kubernetes\n              spec:\n                artifacts:\n                  sidecars:\n                    - sidecar:\n                        type: Dockerhub\n                        identifier: side1\n                        spec:\n                          connectorRef: account.dockerTesting\n                          imagePath: <+input>\n                    - sidecar:\n                        type: Dockerhub\n                        identifier: side2\n                        spec:\n                          connectorRef: account.dockerTesting\n                          imagePath: <+input>\n                  primary:\n                    type: Dockerhub\n                    spec:\n                      connectorRef: account.dockerTesting\n                      imagePath: <+input>\n                manifests:\n                  - manifest:\n                      identifier: man1\n                      type: K8sManifest\n                      spec:\n                        store:\n                          type: Git\n                          spec:\n                            connectorRef: account.sampelgit\n                            gitFetchType: Branch\n                            branch: <+input>\n                            commitId: ""\n                            paths:\n                              - <+input>\n                artifactOverrideSets:\n                  - overrideSet:\n                      identifier: over1\n                      artifacts:\n                        primary:\n                          type: Dockerhub\n                          spec:\n                            connectorRef: account.dockerTesting\n                            imagePath: <+input>\n                        sidecars:\n                          - sidecar:\n                              type: Dockerhub\n                              identifier: side1\n                              spec:\n                                connectorRef: account.dockerTesting\n                                imagePath: <+input>\n                manifestOverrideSets:\n                  - overrideSet:\n                      identifier: over2\n                      manifests:\n                        - manifest:\n                            identifier: man2\n                            type: Values\n                            spec:\n                              store:\n                                type: Git\n                                spec:\n                                  connectorRef: account.sampelgit\n                                  gitFetchType: Commit\n                                  branch: ""\n                                  commitId: <+input>\n                                  paths:\n                                    - <+input>\n          infrastructure:\n            environment:\n              name: prod1\n              identifier: prod1\n              description: ""\n              type: PreProduction\n            infrastructureDefinition:\n              type: KubernetesDirect\n              spec:\n                connectorRef: <+input>\n                namespace: <+input>.allowedValues(harness)\n                releaseName: <+input>.regex(harness*)\n          execution:\n            steps:\n              - step:\n                  name: Rollout Deployment\n                  identifier: rolloutDeployment\n                  type: K8sRollingDeploy\n                  spec:\n                    timeout: 10m\n                    skipDryRun: true\n            rollbackSteps:\n              - step:\n                  name: Rollback Rollout Deployment\n                  identifier: rollbackRolloutDeployment\n                  type: K8sRollingRollback\n                  spec:\n                    timeout: 10m\n'
  },
  metaData: null,
  correlationId: 'd9df6311-b6a4-44de-a6b4-504bf0036ba2'
}
