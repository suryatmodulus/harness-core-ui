/*
 * Copyright 2022 Harness Inc. All rights reserved.
 * Use of this source code is governed by the PolyForm Shield 1.0.0 license
 * that can be found in the licenses directory at the root of this repository, also available at
 * https://polyformproject.org/wp-content/uploads/2020/06/PolyForm-Shield-1.0.0.txt.
 */

/* Generated by restful-react */

import React from 'react'
import { Get, GetProps, useGet, UseGetProps, Mutate, MutateProps, useMutate, UseMutateProps } from 'restful-react'

import { getConfig } from '../config'
export const SPEC_VERSION = '1.0.0'
export interface ALBAccessPointCore {
  albARN?: string
  name?: string
  security_groups?: string[]
  vpc?: string
}

export interface ASGMinimal {
  availability_zones?: string[]
  cloud_account_id?: string
  desired?: number
  id?: string
  max?: number
  meta?: { [key: string]: any }
  min?: number
  mixed_instance?: boolean
  name?: string
  on_demand?: number
  provider_name?: string
  region?: string
  spot?: number
  status?: string
  target_groups?: TargetGroupMinimal[]
}

export interface ASGResourceFilterBody {
  /**
   * String representation of TOML filter
   */
  Text?: string
}

export interface AccessPoint {
  account_id?: string
  cloud_account_id?: string
  editables?: string[]
  host_name?: string
  id?: string
  metadata?: AccessPointMeta
  name?: string
  org_id?: string
  project_id?: string
  region?: string
  security_groups?: string[]
  status?: 'created' | 'submitted' | 'errored'
  subnets?: string[]
  type?: string
  vpc?: string
}

export interface AccessPointActivityResponse {
  response?: ServiceUsageRecord
}

export interface AccessPointCore {
  details?: ALBAccessPointCore | AzureAccessPointCore
  type?: string
}

export interface AccessPointCoresResponse {
  response?: AccessPointCore[]
}

export interface AccessPointMeta {
  albArn?: string
  app_gateway_id?: string
  certificate?: CertificateData
  certificate_id?: string
  dns?: {
    others?: string
    route53?: {
      hosted_zone_id?: string
    }
  }
  error?: string
  fe_ip_id?: string
  fe_ip_name?: string
  func_region?: string
  resource_group?: string
  security_groups?: string[]
  size?: string
  subnet_id?: string
  subnet_name?: string
}

export interface Account {
  created_by?: number
  id?: number
  name?: string
  org_id?: number
  service_provider?: string
}

export interface AllASGResponse {
  response?: ASGMinimal[]
}

export interface AllAccountsResponse {
  response?: Account[]
}

export interface AllCertificatesResponse {
  response?: Certificate[]
}

export interface AllContainerServiceServicesResponse {
  response?: ContainerServiceServiceMinimal[]
}

export interface AllExecutionRolesResponse {
  response?: ExecutionRule[]
}

export interface AllHostedZonesResponse {
  response?: HostedZone[]
}

export interface AllPublicIpsResponse {
  response?: PublicIp[]
}

export interface AllRegionsResponse {
  response?: Region[]
}

export interface AllResourceGroupsResponse {
  response?: ResourceGroup[]
}

export interface AllResourcesOfAccountResponse {
  response?: Resource[]
}

export interface AllSecurityGroupsResponse {
  response?: NetworkSecurityGroup[]
}

export interface AllSubnetsResponse {
  response?: Subnet[]
}

export interface AllVPCsResponse {
  response?: Vpc[]
}

export interface AppIdResponse {
  response?: {
    app_id?: string
  }
}

export interface AzureAccessPointCore {
  fe_ip_id?: string
  fe_ip_name?: string
  id?: string
  name?: string
  region?: string
  resource_group?: string
  size?: string
  size_name?: string
  subnet_id?: string
  subnet_name?: string
  vpc?: string
  vpc_name?: string
}

export interface CFTResponse {
  response?: {
    path?: string
  }
}

export interface Certificate {
  id?: string
  name?: string
}

export interface CertificateData {
  content?: string
  name?: string
  password?: string
}

export interface ContainerClusterMinimal {
  id?: string
  name?: string
  region?: string
}

export interface ContainerClustersResponse {
  response?: ContainerClusterMinimal[]
}

export interface ContainerServiceService {
  /**
   * name of cluster of the service
   */
  cluster?: string
  /**
   * id of service
   */
  id?: string
  /**
   * Whether the service is load-balanced or not. Only loadbalanced services have DNS mapping
   */
  loadbalanced?: boolean
  /**
   * name of service
   */
  name?: string
  /**
   * region of service
   */
  region?: string
  /**
   * desired number of tasks
   */
  task_count?: number
}

export interface ContainerServiceServiceMinimal {
  /**
   * Name of cluster of service
   */
  cluster?: string
  /**
   * id of service
   */
  id?: string
  /**
   * name of service
   */
  name?: string
  /**
   * region of service
   */
  region?: string
}

export interface ContainerSvc {
  cluster?: string
  region?: string
  service?: string
  task_count?: number
}

export interface CreateAccessPointResponse {
  errors?: string[]
  metadata?: { [key: string]: any }
  response?: AccessPoint
}

export interface CumulativeSavings {
  actual_cost?: number[]
  days?: string[]
  potential_cost?: number[]
  savings?: number[]
  savings_percent?: number
  total_cost?: number
  total_potential?: number
  total_savings?: number
}

export interface CumulativeSavingsResponse {
  response?: CumulativeSavings
}

export interface DeleteAccessPointPayload {
  ids?: string[]
  with_resources?: boolean
}

export interface DescribeServiceOfContainerServicesResponse {
  response?: ContainerServiceService
}

export interface ExecutionRule {
  id?: string
  name?: string
}

export interface FirewallRule {
  from?: string
  protocol?: string
  to?: string
}

export interface GatewaySessionReportResponse {
  response?: SessionReportRows
}

export interface GetAccessPointResponse {
  response?: AccessPoint
}

export interface HealthCheck {
  path?: string
  port?: number
  protocol?: string
  status_code_from?: number
  status_code_to?: number
  timeout?: number
}

export interface HostedZone {
  id?: string
  name?: string
}

export interface InstanceBasedRoutingData {
  filter_text?: string
  scale_group?: ASGMinimal
}

export interface ListAccessPointResponse {
  response?: AccessPoint[]
}

export interface MaptoDNSBody {
  details?: { [key: string]: any }
  dns_provider?: string
}

export interface NetworkSecurityGroup {
  id?: string
  inbound_rules?: FirewallRule[]
  name?: string
  outbound_rules?: FirewallRule[]
}

export interface NetworkSecurityGroupForInstanceArray {
  [key: string]: NetworkSecurityGroup[]
}

/**
 * Details of time schedule by which the resource should be controlled
 */
export interface OccurrenceSchedule {
  downtime?: TimeSchedule
  /**
   * Time zone in which the schedule should be applied
   */
  timezone?: string
  uptime?: TimeSchedule
}

export interface Opts {
  access_details?: { [key: string]: any }
  always_use_private_ip?: boolean
  delete_cloud_resources?: boolean
  hide_progress_page?: boolean
  preserve_private_ip?: boolean
}

export interface PortConfig {
  action?: string
  port?: number
  protocol?: string
  redirect_url?: string
  routing_rules?: RoutingRule[]
  server_name?: string
  target_port?: number
  target_protocol?: string
}

export interface PublicIp {
  address?: string
  id?: string
  name?: string
  version?: string
}

export interface RDSDatabase {
  id?: string
  region?: string
}

export interface Region {
  label?: string
  name?: string
}

export interface ReportRequestBody {
  from?: string
  report_name?: string
  service_ids?: number[]
  timezone?: string
  to?: string
}

export interface Resource {
  availability_zone?: string
  cloud_account_id?: number
  id?: string
  ipv4?: string[]
  is_spot?: boolean
  launch_time?: string
  metadata?: { [key: string]: any }
  name?: string
  platform?: string
  private_ipv4?: string[]
  provider_name?: string
  provider_type?: string
  region?: string
  resource_type?: string
  status?: string
  /**
   * tag key as attribute key and tag value as attribute value
   */
  tags?: { [key: string]: any }
  type?: string
}

export interface ResourceFilterBody {
  /**
   * String representation of TOML filter
   */
  Text?: string
}

export interface ResourceGroup {
  id?: string
  name?: string
  type?: string
}

export interface ResourcesResponse {
  response?: Resource[]
}

export interface RoutingData {
  container_svc?: ContainerSvc
  custom_domain_providers?: { [key: string]: any }
  database?: RDSDatabase
  instance?: InstanceBasedRoutingData
  k8s?: {
    ConnectorID?: string
    Namespace?: string
    RuleJson?: string
  }
  lb?: string
  ports?: PortConfig[]
}

export interface RoutingRule {
  path_match?: string
}

export interface SGResourceFilterBody {
  /**
   * String representation of TOML filter
   */
  text?: string
}

export interface SaveServiceRequest {
  apply_now?: boolean
  deps?: ServiceDep[]
  service?: Service
}

export interface SaveStaticSchedulesRequest {
  id?: number
  schedule?: StaticSchedule
}

export interface SecurityGroupsOfInstancesResponse {
  response?: NetworkSecurityGroupForInstanceArray
}

export interface Service {
  access_point_id?: string
  account_identifier?: string
  cloud_account_id: string
  created_at?: string
  custom_domains?: string[]
  disabled?: boolean
  fulfilment?: string
  health_check?: HealthCheck | {} | null
  host_name?: string
  id?: number
  idle_time_mins?: number
  kind: string
  match_all_subdomains?: boolean
  metadata?: ServiceMetadata
  name: string
  opts?: Opts
  org_id: string
  project_id?: string
  routing?: RoutingData
  status?: string
}

export interface ServiceDefinitionByIDResponse {
  deps?: ServiceDependency[]
  service?: Service
}

export interface ServiceDep {
  delay_secs?: number
  dep_id?: number
  service_id?: number
}

export interface ServiceDepTree {
  children?: ServiceDepTree[]
  service?: Service
}

export interface ServiceDependency {
  delay_secs?: number
  dep_id?: number
  service_id?: number
}

export interface ServiceDiagnostics {
  message?: string
  name?: string
  success?: boolean
  type?: string
}

export interface ServiceDiagnosticsResponse {
  response?: ServiceDiagnostics[]
}

export interface ServiceError {
  action?: string
  error?: string
}

export interface ServiceHealthResponse {
  response?: { [key: string]: any }
}

export interface ServiceLog {
  created_at?: string
  error?: string
  message?: string
  state?: string
}

export interface ServiceLogsResponse {
  response?: ServiceLog[]
}

export interface ServiceMetadata {
  cloud_provider_details?: {
    name?: string
    type?: string
  }
  kubernetes_connector_id?: string
  service_errors?: ServiceError[]
  target_group_details?: { [key: string]: any }
}

export interface ServiceRequest {
  created_at?: string
  path?: string
}

export interface ServiceRequestsResponse {
  response?: ServiceRequest[]
}

export interface ServiceResponse {
  response?: Service
}

export interface ServiceSaveRequest {
  service?: Service
}

export interface ServiceSavings {
  actual_cost?: number
  actual_hours?: number
  actual_savings?: number
  idle_hours?: number
  potential_cost?: number
  savings_percentage?: number
  usage_date?: string
}

export interface ServiceSavingsGraphResponse {
  response?: ServiceSavings[]
}

export interface ServiceSavingsResponse {
  response?: ServiceSavings
}

export interface ServiceStats {
  down_time_mins?: number
  idle_time_percentage?: number
  service_id?: number
  total_time_mins?: number
}

export interface ServiceStatsResponse {
  dep_tree?: ServiceDepTree
  stats?: ServiceStats
}

export interface ServiceUsageRecord {
  created_at?: string
  idle_time_mins?: number
  path?: string
  service_id?: number
  session_id?: string
}

export type ServiceUsageResponse = ServiceUsageRecord[]

export interface ServicesResponse {
  response?: Service[]
}

export interface SessionReportRow {
  end?: string
  hours?: number
  start?: string
}

export interface SessionReportRows {
  rows?: SessionReportRow[]
}

export interface StaticSchedule {
  /**
   * ID of account
   */
  account?: string
  /**
   * Description of static schedule
   */
  description?: string
  details?: OccurrenceSchedule
  /**
   * ID of static schedules
   */
  id?: number
  /**
   * Name of the schedule
   */
  name?: string
  /**
   * List of resources to be controlled by the schedule
   */
  resources?: StaticScheduleResource[]
}

/**
 * Details of an independent resource that can be controlled by a schedule
 */
export interface StaticScheduleResource {
  /**
   * ID of the resource to be controlled by schedule. For AutoStopping rule, this would be the ID of the rule
   */
  id?: string
  /**
   * Type of the resource to be controlled
   */
  type?: 'autostop_rule'
}

export interface StaticSchedulesGetResponse {
  response?: StaticSchedule
}

export interface StaticSchedulesListResponse {
  response?: StaticSchedule[]
}

export interface Subnet {
  az_id?: string
  id?: string
  name?: string
}

export interface TargetGroupMinimal {
  id?: string
  name?: string
  port?: number
  protocol?: string
  vpc?: string
}

export interface TimeInDay {
  /**
   * Hour
   */
  hour?: number
  /**
   * Minutes
   */
  min?: number
}

/**
 * Specifies the occurrence schedule. Occurrence schedule can either be specified as period or as days
 */
export interface TimeSchedule {
  /**
   * For specifying a recurring schedule in terms of week days
   */
  days?: {
    /**
     * Equivalent to selecting all days
     */
    all_day?: boolean
    /**
     * Days of week on which the schedule should be executed
     */
    days?: number[]
    end_time?: TimeInDay
    start_time?: TimeInDay
  }
  /**
   * For schedules that uses an exact time period
   */
  period?: {
    /**
     * End time of the period
     */
    end?: string
    /**
     * Start time of the period
     */
    start?: string
  }
}

export interface ValidateSchedulesBody {
  /**
   * List of static schedules
   */
  schedules?: StaticSchedule[]
}

export interface Vpc {
  id?: string
  name?: string
}

export type AccessPointRequestBody = AccessPoint

export interface DeleteAccessPointsQueryParams {
  accountIdentifier: string
}

export interface DeleteAccessPointsPathParams {
  account_id: string
}

export type DeleteAccessPointsProps = Omit<
  MutateProps<void, unknown, DeleteAccessPointsQueryParams, DeleteAccessPointPayload, DeleteAccessPointsPathParams>,
  'path' | 'verb'
> &
  DeleteAccessPointsPathParams

/**
 * Delete Access Points
 */
export const DeleteAccessPoints = ({ account_id, ...props }: DeleteAccessPointsProps) => (
  <Mutate<void, unknown, DeleteAccessPointsQueryParams, DeleteAccessPointPayload, DeleteAccessPointsPathParams>
    verb="DELETE"
    path={`/accounts/${account_id}/autostopping/loadbalancers`}
    base={getConfig('lw/api')}
    {...props}
  />
)

export type UseDeleteAccessPointsProps = Omit<
  UseMutateProps<void, unknown, DeleteAccessPointsQueryParams, DeleteAccessPointPayload, DeleteAccessPointsPathParams>,
  'path' | 'verb'
> &
  DeleteAccessPointsPathParams

/**
 * Delete Access Points
 */
export const useDeleteAccessPoints = ({ account_id, ...props }: UseDeleteAccessPointsProps) =>
  useMutate<void, unknown, DeleteAccessPointsQueryParams, DeleteAccessPointPayload, DeleteAccessPointsPathParams>(
    'DELETE',
    (paramsInPath: DeleteAccessPointsPathParams) => `/accounts/${paramsInPath.account_id}/autostopping/loadbalancers`,
    { base: getConfig('lw/api'), pathParams: { account_id }, ...props }
  )

export interface ListAccessPointsQueryParams {
  vpc?: string
  region?: string
  cloud_account_id: string
  accountIdentifier: string
}

export interface ListAccessPointsPathParams {
  account_id: string
}

export type ListAccessPointsProps = Omit<
  GetProps<ListAccessPointResponse, void, ListAccessPointsQueryParams, ListAccessPointsPathParams>,
  'path'
> &
  ListAccessPointsPathParams

/**
 * List all AccessPoints
 *
 * List all AccessPoints
 */
export const ListAccessPoints = ({ account_id, ...props }: ListAccessPointsProps) => (
  <Get<ListAccessPointResponse, void, ListAccessPointsQueryParams, ListAccessPointsPathParams>
    path={`/accounts/${account_id}/autostopping/loadbalancers`}
    base={getConfig('lw/api')}
    {...props}
  />
)

export type UseListAccessPointsProps = Omit<
  UseGetProps<ListAccessPointResponse, void, ListAccessPointsQueryParams, ListAccessPointsPathParams>,
  'path'
> &
  ListAccessPointsPathParams

/**
 * List all AccessPoints
 *
 * List all AccessPoints
 */
export const useListAccessPoints = ({ account_id, ...props }: UseListAccessPointsProps) =>
  useGet<ListAccessPointResponse, void, ListAccessPointsQueryParams, ListAccessPointsPathParams>(
    (paramsInPath: ListAccessPointsPathParams) => `/accounts/${paramsInPath.account_id}/autostopping/loadbalancers`,
    { base: getConfig('lw/api'), pathParams: { account_id }, ...props }
  )

export interface CreateAccessPointQueryParams {
  accountIdentifier: string
}

export interface CreateAccessPointPathParams {
  account_id: string
}

export type CreateAccessPointProps = Omit<
  MutateProps<
    CreateAccessPointResponse,
    void,
    CreateAccessPointQueryParams,
    AccessPointRequestBody,
    CreateAccessPointPathParams
  >,
  'path' | 'verb'
> &
  CreateAccessPointPathParams

/**
 * Create an AccessPoint
 *
 * Create an AccessPoint
 */
export const CreateAccessPoint = ({ account_id, ...props }: CreateAccessPointProps) => (
  <Mutate<
    CreateAccessPointResponse,
    void,
    CreateAccessPointQueryParams,
    AccessPointRequestBody,
    CreateAccessPointPathParams
  >
    verb="POST"
    path={`/accounts/${account_id}/autostopping/loadbalancers`}
    base={getConfig('lw/api')}
    {...props}
  />
)

export type UseCreateAccessPointProps = Omit<
  UseMutateProps<
    CreateAccessPointResponse,
    void,
    CreateAccessPointQueryParams,
    AccessPointRequestBody,
    CreateAccessPointPathParams
  >,
  'path' | 'verb'
> &
  CreateAccessPointPathParams

/**
 * Create an AccessPoint
 *
 * Create an AccessPoint
 */
export const useCreateAccessPoint = ({ account_id, ...props }: UseCreateAccessPointProps) =>
  useMutate<
    CreateAccessPointResponse,
    void,
    CreateAccessPointQueryParams,
    AccessPointRequestBody,
    CreateAccessPointPathParams
  >(
    'POST',
    (paramsInPath: CreateAccessPointPathParams) => `/accounts/${paramsInPath.account_id}/autostopping/loadbalancers`,
    { base: getConfig('lw/api'), pathParams: { account_id }, ...props }
  )

export interface EditAccessPointQueryParams {
  accountIdentifier: string
}

export interface EditAccessPointPathParams {
  account_id: string
}

export type EditAccessPointProps = Omit<
  MutateProps<
    CreateAccessPointResponse,
    void,
    EditAccessPointQueryParams,
    AccessPointRequestBody,
    EditAccessPointPathParams
  >,
  'path' | 'verb'
> &
  EditAccessPointPathParams

/**
 * Edit an AccessPoint
 *
 * Edit an AccessPoint
 */
export const EditAccessPoint = ({ account_id, ...props }: EditAccessPointProps) => (
  <Mutate<
    CreateAccessPointResponse,
    void,
    EditAccessPointQueryParams,
    AccessPointRequestBody,
    EditAccessPointPathParams
  >
    verb="PUT"
    path={`/accounts/${account_id}/autostopping/loadbalancers`}
    base={getConfig('lw/api')}
    {...props}
  />
)

export type UseEditAccessPointProps = Omit<
  UseMutateProps<
    CreateAccessPointResponse,
    void,
    EditAccessPointQueryParams,
    AccessPointRequestBody,
    EditAccessPointPathParams
  >,
  'path' | 'verb'
> &
  EditAccessPointPathParams

/**
 * Edit an AccessPoint
 *
 * Edit an AccessPoint
 */
export const useEditAccessPoint = ({ account_id, ...props }: UseEditAccessPointProps) =>
  useMutate<
    CreateAccessPointResponse,
    void,
    EditAccessPointQueryParams,
    AccessPointRequestBody,
    EditAccessPointPathParams
  >(
    'PUT',
    (paramsInPath: EditAccessPointPathParams) => `/accounts/${paramsInPath.account_id}/autostopping/loadbalancers`,
    { base: getConfig('lw/api'), pathParams: { account_id }, ...props }
  )

export interface AllAccessPointsQueryParams {
  accountIdentifier: string
}

export interface AllAccessPointsPathParams {
  account_id: string
}

export type AllAccessPointsProps = Omit<
  GetProps<ListAccessPointResponse, void, AllAccessPointsQueryParams, AllAccessPointsPathParams>,
  'path'
> &
  AllAccessPointsPathParams

/**
 * Lists all AccessPoints for an account
 *
 * Returns all AccessPoints for an account
 */
export const AllAccessPoints = ({ account_id, ...props }: AllAccessPointsProps) => (
  <Get<ListAccessPointResponse, void, AllAccessPointsQueryParams, AllAccessPointsPathParams>
    path={`/accounts/${account_id}/autostopping/loadbalancers/all`}
    base={getConfig('lw/api')}
    {...props}
  />
)

export type UseAllAccessPointsProps = Omit<
  UseGetProps<ListAccessPointResponse, void, AllAccessPointsQueryParams, AllAccessPointsPathParams>,
  'path'
> &
  AllAccessPointsPathParams

/**
 * Lists all AccessPoints for an account
 *
 * Returns all AccessPoints for an account
 */
export const useAllAccessPoints = ({ account_id, ...props }: UseAllAccessPointsProps) =>
  useGet<ListAccessPointResponse, void, AllAccessPointsQueryParams, AllAccessPointsPathParams>(
    (paramsInPath: AllAccessPointsPathParams) => `/accounts/${paramsInPath.account_id}/autostopping/loadbalancers/all`,
    { base: getConfig('lw/api'), pathParams: { account_id }, ...props }
  )

export interface AccessPointResourcesQueryParams {
  cloud_account_id: string
  region: string
  resource_group_name?: string
  accountIdentifier: string
  service?: string
  cluster?: string
}

export interface AccessPointResourcesPathParams {
  account_id: string
}

export type AccessPointResourcesProps = Omit<
  GetProps<AccessPointCoresResponse, void, AccessPointResourcesQueryParams, AccessPointResourcesPathParams>,
  'path'
> &
  AccessPointResourcesPathParams

/**
 * Lists all resources that can be used as access point
 *
 * Lists all resources that can be used as access point. Eg : alb in the case of AWS account
 */
export const AccessPointResources = ({ account_id, ...props }: AccessPointResourcesProps) => (
  <Get<AccessPointCoresResponse, void, AccessPointResourcesQueryParams, AccessPointResourcesPathParams>
    path={`/accounts/${account_id}/autostopping/loadbalancers/supported_resources`}
    base={getConfig('lw/api')}
    {...props}
  />
)

export type UseAccessPointResourcesProps = Omit<
  UseGetProps<AccessPointCoresResponse, void, AccessPointResourcesQueryParams, AccessPointResourcesPathParams>,
  'path'
> &
  AccessPointResourcesPathParams

/**
 * Lists all resources that can be used as access point
 *
 * Lists all resources that can be used as access point. Eg : alb in the case of AWS account
 */
export const useAccessPointResources = ({ account_id, ...props }: UseAccessPointResourcesProps) =>
  useGet<AccessPointCoresResponse, void, AccessPointResourcesQueryParams, AccessPointResourcesPathParams>(
    (paramsInPath: AccessPointResourcesPathParams) =>
      `/accounts/${paramsInPath.account_id}/autostopping/loadbalancers/supported_resources`,
    { base: getConfig('lw/api'), pathParams: { account_id }, ...props }
  )

export interface GetAccessPointQueryParams {
  accountIdentifier: string
}

export interface GetAccessPointPathParams {
  account_id: string
  lb_id: string
}

export type GetAccessPointProps = Omit<
  GetProps<GetAccessPointResponse, void, GetAccessPointQueryParams, GetAccessPointPathParams>,
  'path'
> &
  GetAccessPointPathParams

/**
 * Get access point
 *
 * Get access point
 */
export const GetAccessPoint = ({ account_id, lb_id, ...props }: GetAccessPointProps) => (
  <Get<GetAccessPointResponse, void, GetAccessPointQueryParams, GetAccessPointPathParams>
    path={`/accounts/${account_id}/autostopping/loadbalancers/${lb_id}`}
    base={getConfig('lw/api')}
    {...props}
  />
)

export type UseGetAccessPointProps = Omit<
  UseGetProps<GetAccessPointResponse, void, GetAccessPointQueryParams, GetAccessPointPathParams>,
  'path'
> &
  GetAccessPointPathParams

/**
 * Get access point
 *
 * Get access point
 */
export const useGetAccessPoint = ({ account_id, lb_id, ...props }: UseGetAccessPointProps) =>
  useGet<GetAccessPointResponse, void, GetAccessPointQueryParams, GetAccessPointPathParams>(
    (paramsInPath: GetAccessPointPathParams) =>
      `/accounts/${paramsInPath.account_id}/autostopping/loadbalancers/${paramsInPath.lb_id}`,
    { base: getConfig('lw/api'), pathParams: { account_id, lb_id }, ...props }
  )

export interface AccessPointActivityQueryParams {
  accountIdentifier: string
}

export interface AccessPointActivityPathParams {
  account_id: string
  lb_id: string
}

export type AccessPointActivityProps = Omit<
  GetProps<AccessPointActivityResponse, void, AccessPointActivityQueryParams, AccessPointActivityPathParams>,
  'path'
> &
  AccessPointActivityPathParams

/**
 * get lastest activity for an access point
 *
 * get lastest activity for an access point
 */
export const AccessPointActivity = ({ account_id, lb_id, ...props }: AccessPointActivityProps) => (
  <Get<AccessPointActivityResponse, void, AccessPointActivityQueryParams, AccessPointActivityPathParams>
    path={`/accounts/${account_id}/autostopping/loadbalancers/${lb_id}/last_active_at`}
    base={getConfig('lw/api')}
    {...props}
  />
)

export type UseAccessPointActivityProps = Omit<
  UseGetProps<AccessPointActivityResponse, void, AccessPointActivityQueryParams, AccessPointActivityPathParams>,
  'path'
> &
  AccessPointActivityPathParams

/**
 * get lastest activity for an access point
 *
 * get lastest activity for an access point
 */
export const useAccessPointActivity = ({ account_id, lb_id, ...props }: UseAccessPointActivityProps) =>
  useGet<AccessPointActivityResponse, void, AccessPointActivityQueryParams, AccessPointActivityPathParams>(
    (paramsInPath: AccessPointActivityPathParams) =>
      `/accounts/${paramsInPath.account_id}/autostopping/loadbalancers/${paramsInPath.lb_id}/last_active_at`,
    { base: getConfig('lw/api'), pathParams: { account_id, lb_id }, ...props }
  )

export interface MapToDNSQueryParams {
  accountIdentifier: string
}

export interface MapToDNSPathParams {
  account_id: string
  lb_id: string
}

export type MapToDNSProps = Omit<
  MutateProps<void, void, MapToDNSQueryParams, MaptoDNSBody, MapToDNSPathParams>,
  'path' | 'verb'
> &
  MapToDNSPathParams

/**
 * map access point to dns
 *
 * map access point to dns
 */
export const MapToDNS = ({ account_id, lb_id, ...props }: MapToDNSProps) => (
  <Mutate<void, void, MapToDNSQueryParams, MaptoDNSBody, MapToDNSPathParams>
    verb="POST"
    path={`/accounts/${account_id}/autostopping/loadbalancers/${lb_id}/map_dns`}
    base={getConfig('lw/api')}
    {...props}
  />
)

export type UseMapToDNSProps = Omit<
  UseMutateProps<void, void, MapToDNSQueryParams, MaptoDNSBody, MapToDNSPathParams>,
  'path' | 'verb'
> &
  MapToDNSPathParams

/**
 * map access point to dns
 *
 * map access point to dns
 */
export const useMapToDNS = ({ account_id, lb_id, ...props }: UseMapToDNSProps) =>
  useMutate<void, void, MapToDNSQueryParams, MaptoDNSBody, MapToDNSPathParams>(
    'POST',
    (paramsInPath: MapToDNSPathParams) =>
      `/accounts/${paramsInPath.account_id}/autostopping/loadbalancers/${paramsInPath.lb_id}/map_dns`,
    { base: getConfig('lw/api'), pathParams: { account_id, lb_id }, ...props }
  )

export interface AccessPointRulesQueryParams {
  accountIdentifier: string
}

export interface AccessPointRulesPathParams {
  account_id: string
  lb_id: string
}

export type AccessPointRulesProps = Omit<
  GetProps<ServicesResponse, void, AccessPointRulesQueryParams, AccessPointRulesPathParams>,
  'path'
> &
  AccessPointRulesPathParams

/**
 * Lists all Rules for an access point
 *
 * Lists all Rules for an access point
 */
export const AccessPointRules = ({ account_id, lb_id, ...props }: AccessPointRulesProps) => (
  <Get<ServicesResponse, void, AccessPointRulesQueryParams, AccessPointRulesPathParams>
    path={`/accounts/${account_id}/autostopping/loadbalancers/${lb_id}/rules`}
    base={getConfig('lw/api')}
    {...props}
  />
)

export type UseAccessPointRulesProps = Omit<
  UseGetProps<ServicesResponse, void, AccessPointRulesQueryParams, AccessPointRulesPathParams>,
  'path'
> &
  AccessPointRulesPathParams

/**
 * Lists all Rules for an access point
 *
 * Lists all Rules for an access point
 */
export const useAccessPointRules = ({ account_id, lb_id, ...props }: UseAccessPointRulesProps) =>
  useGet<ServicesResponse, void, AccessPointRulesQueryParams, AccessPointRulesPathParams>(
    (paramsInPath: AccessPointRulesPathParams) =>
      `/accounts/${paramsInPath.account_id}/autostopping/loadbalancers/${paramsInPath.lb_id}/rules`,
    { base: getConfig('lw/api'), pathParams: { account_id, lb_id }, ...props }
  )

export interface GetServicesQueryParams {
  accountIdentifier: string
}

export interface GetServicesPathParams {
  account_id: string
}

export type GetServicesProps = Omit<
  GetProps<ServicesResponse, void, GetServicesQueryParams, GetServicesPathParams>,
  'path'
> &
  GetServicesPathParams

/**
 * Gets all AutoStopping Gateways
 *
 * Multiple status values can be provided with comma separated strings
 */
export const GetServices = ({ account_id, ...props }: GetServicesProps) => (
  <Get<ServicesResponse, void, GetServicesQueryParams, GetServicesPathParams>
    path={`/accounts/${account_id}/autostopping/rules`}
    base={getConfig('lw/api')}
    {...props}
  />
)

export type UseGetServicesProps = Omit<
  UseGetProps<ServicesResponse, void, GetServicesQueryParams, GetServicesPathParams>,
  'path'
> &
  GetServicesPathParams

/**
 * Gets all AutoStopping Gateways
 *
 * Multiple status values can be provided with comma separated strings
 */
export const useGetServices = ({ account_id, ...props }: UseGetServicesProps) =>
  useGet<ServicesResponse, void, GetServicesQueryParams, GetServicesPathParams>(
    (paramsInPath: GetServicesPathParams) => `/accounts/${paramsInPath.account_id}/autostopping/rules`,
    { base: getConfig('lw/api'), pathParams: { account_id }, ...props }
  )

export interface SaveServiceQueryParams {
  accountIdentifier: string
}

export interface SaveServicePathParams {
  account_id: string
}

export type SaveServiceProps = Omit<
  MutateProps<ServiceResponse, void, SaveServiceQueryParams, SaveServiceRequest, SaveServicePathParams>,
  'path' | 'verb'
> &
  SaveServicePathParams

/**
 * Create/Update Autostopping gateway
 */
export const SaveService = ({ account_id, ...props }: SaveServiceProps) => (
  <Mutate<ServiceResponse, void, SaveServiceQueryParams, SaveServiceRequest, SaveServicePathParams>
    verb="POST"
    path={`/accounts/${account_id}/autostopping/rules`}
    base={getConfig('lw/api')}
    {...props}
  />
)

export type UseSaveServiceProps = Omit<
  UseMutateProps<ServiceResponse, void, SaveServiceQueryParams, SaveServiceRequest, SaveServicePathParams>,
  'path' | 'verb'
> &
  SaveServicePathParams

/**
 * Create/Update Autostopping gateway
 */
export const useSaveService = ({ account_id, ...props }: UseSaveServiceProps) =>
  useMutate<ServiceResponse, void, SaveServiceQueryParams, SaveServiceRequest, SaveServicePathParams>(
    'POST',
    (paramsInPath: SaveServicePathParams) => `/accounts/${paramsInPath.account_id}/autostopping/rules`,
    { base: getConfig('lw/api'), pathParams: { account_id }, ...props }
  )

export interface CumulativeServiceSavingsQueryParams {
  accountIdentifier: string
}

export interface CumulativeServiceSavingsPathParams {
  account_id: string
}

export type CumulativeServiceSavingsProps = Omit<
  GetProps<CumulativeSavingsResponse, void, CumulativeServiceSavingsQueryParams, CumulativeServiceSavingsPathParams>,
  'path'
> &
  CumulativeServiceSavingsPathParams

/**
 * CumulativeSavings for all services
 *
 * CumulativeSavings for all services
 */
export const CumulativeServiceSavings = ({ account_id, ...props }: CumulativeServiceSavingsProps) => (
  <Get<CumulativeSavingsResponse, void, CumulativeServiceSavingsQueryParams, CumulativeServiceSavingsPathParams>
    path={`/accounts/${account_id}/autostopping/rules/savings/cumulative`}
    base={getConfig('lw/api')}
    {...props}
  />
)

export type UseCumulativeServiceSavingsProps = Omit<
  UseGetProps<CumulativeSavingsResponse, void, CumulativeServiceSavingsQueryParams, CumulativeServiceSavingsPathParams>,
  'path'
> &
  CumulativeServiceSavingsPathParams

/**
 * CumulativeSavings for all services
 *
 * CumulativeSavings for all services
 */
export const useCumulativeServiceSavings = ({ account_id, ...props }: UseCumulativeServiceSavingsProps) =>
  useGet<CumulativeSavingsResponse, void, CumulativeServiceSavingsQueryParams, CumulativeServiceSavingsPathParams>(
    (paramsInPath: CumulativeServiceSavingsPathParams) =>
      `/accounts/${paramsInPath.account_id}/autostopping/rules/savings/cumulative`,
    { base: getConfig('lw/api'), pathParams: { account_id }, ...props }
  )

export interface DeleteServiceQueryParams {
  accountIdentifier: string
}

export interface DeleteServicePathParams {
  account_id: string
}

export type DeleteServiceProps = Omit<
  MutateProps<void, void, DeleteServiceQueryParams, number, DeleteServicePathParams>,
  'path' | 'verb'
> &
  DeleteServicePathParams

/**
 * Service Deletion
 *
 * Deletes a service
 */
export const DeleteService = ({ account_id, ...props }: DeleteServiceProps) => (
  <Mutate<void, void, DeleteServiceQueryParams, number, DeleteServicePathParams>
    verb="DELETE"
    path={`/accounts/${account_id}/autostopping/rules`}
    base={getConfig('lw/api')}
    {...props}
  />
)

export type UseDeleteServiceProps = Omit<
  UseMutateProps<void, void, DeleteServiceQueryParams, number, DeleteServicePathParams>,
  'path' | 'verb'
> &
  DeleteServicePathParams

/**
 * Service Deletion
 *
 * Deletes a service
 */
export const useDeleteService = ({ account_id, ...props }: UseDeleteServiceProps) =>
  useMutate<void, void, DeleteServiceQueryParams, number, DeleteServicePathParams>(
    'DELETE',
    (paramsInPath: DeleteServicePathParams) => `/accounts/${paramsInPath.account_id}/autostopping/rules`,
    { base: getConfig('lw/api'), pathParams: { account_id }, ...props }
  )

export interface RouteDetailsResponse {
  response?: SaveServiceRequest
}

export interface RouteDetailsQueryParams {
  accountIdentifier: string
}

export interface RouteDetailsPathParams {
  account_id: string
  rule_id: number
}

export type RouteDetailsProps = Omit<
  GetProps<RouteDetailsResponse, void, RouteDetailsQueryParams, RouteDetailsPathParams>,
  'path'
> &
  RouteDetailsPathParams

/**
 * Details of a Route
 *
 * Get Details of a Route
 */
export const RouteDetails = ({ account_id, rule_id, ...props }: RouteDetailsProps) => (
  <Get<RouteDetailsResponse, void, RouteDetailsQueryParams, RouteDetailsPathParams>
    path={`/accounts/${account_id}/autostopping/rules/${rule_id}`}
    base={getConfig('lw/api')}
    {...props}
  />
)

export type UseRouteDetailsProps = Omit<
  UseGetProps<RouteDetailsResponse, void, RouteDetailsQueryParams, RouteDetailsPathParams>,
  'path'
> &
  RouteDetailsPathParams

/**
 * Details of a Route
 *
 * Get Details of a Route
 */
export const useRouteDetails = ({ account_id, rule_id, ...props }: UseRouteDetailsProps) =>
  useGet<RouteDetailsResponse, void, RouteDetailsQueryParams, RouteDetailsPathParams>(
    (paramsInPath: RouteDetailsPathParams) =>
      `/accounts/${paramsInPath.account_id}/autostopping/rules/${paramsInPath.rule_id}`,
    { base: getConfig('lw/api'), pathParams: { account_id, rule_id }, ...props }
  )

export interface GetServiceDiagnosticsQueryParams {
  accountIdentifier: string
}

export interface GetServiceDiagnosticsPathParams {
  account_id: string
  rule_id: number
}

export type GetServiceDiagnosticsProps = Omit<
  GetProps<ServiceDiagnosticsResponse, void, GetServiceDiagnosticsQueryParams, GetServiceDiagnosticsPathParams>,
  'path'
> &
  GetServiceDiagnosticsPathParams

/**
 * Service Diagnostics
 *
 * Gets the diagnostics result of a service
 */
export const GetServiceDiagnostics = ({ account_id, rule_id, ...props }: GetServiceDiagnosticsProps) => (
  <Get<ServiceDiagnosticsResponse, void, GetServiceDiagnosticsQueryParams, GetServiceDiagnosticsPathParams>
    path={`/accounts/${account_id}/autostopping/rules/${rule_id}/diagnostics`}
    base={getConfig('lw/api')}
    {...props}
  />
)

export type UseGetServiceDiagnosticsProps = Omit<
  UseGetProps<ServiceDiagnosticsResponse, void, GetServiceDiagnosticsQueryParams, GetServiceDiagnosticsPathParams>,
  'path'
> &
  GetServiceDiagnosticsPathParams

/**
 * Service Diagnostics
 *
 * Gets the diagnostics result of a service
 */
export const useGetServiceDiagnostics = ({ account_id, rule_id, ...props }: UseGetServiceDiagnosticsProps) =>
  useGet<ServiceDiagnosticsResponse, void, GetServiceDiagnosticsQueryParams, GetServiceDiagnosticsPathParams>(
    (paramsInPath: GetServiceDiagnosticsPathParams) =>
      `/accounts/${paramsInPath.account_id}/autostopping/rules/${paramsInPath.rule_id}/diagnostics`,
    { base: getConfig('lw/api'), pathParams: { account_id, rule_id }, ...props }
  )

export interface HealthOfServiceQueryParams {
  accountIdentifier: string
}

export interface HealthOfServicePathParams {
  account_id: string
  rule_id: number
}

export type HealthOfServiceProps = Omit<
  GetProps<ServiceHealthResponse, void, HealthOfServiceQueryParams, HealthOfServicePathParams>,
  'path'
> &
  HealthOfServicePathParams

/**
 * Health of a service
 *
 * Returns health of a service
 */
export const HealthOfService = ({ account_id, rule_id, ...props }: HealthOfServiceProps) => (
  <Get<ServiceHealthResponse, void, HealthOfServiceQueryParams, HealthOfServicePathParams>
    path={`/accounts/${account_id}/autostopping/rules/${rule_id}/health`}
    base={getConfig('lw/api')}
    {...props}
  />
)

export type UseHealthOfServiceProps = Omit<
  UseGetProps<ServiceHealthResponse, void, HealthOfServiceQueryParams, HealthOfServicePathParams>,
  'path'
> &
  HealthOfServicePathParams

/**
 * Health of a service
 *
 * Returns health of a service
 */
export const useHealthOfService = ({ account_id, rule_id, ...props }: UseHealthOfServiceProps) =>
  useGet<ServiceHealthResponse, void, HealthOfServiceQueryParams, HealthOfServicePathParams>(
    (paramsInPath: HealthOfServicePathParams) =>
      `/accounts/${paramsInPath.account_id}/autostopping/rules/${paramsInPath.rule_id}/health`,
    { base: getConfig('lw/api'), pathParams: { account_id, rule_id }, ...props }
  )

export interface LogsOfServiceQueryParams {
  accountIdentifier: string
}

export interface LogsOfServicePathParams {
  account_id: string
  rule_id: number
}

export type LogsOfServiceProps = Omit<
  GetProps<ServiceLogsResponse, void, LogsOfServiceQueryParams, LogsOfServicePathParams>,
  'path'
> &
  LogsOfServicePathParams

/**
 * Logs of a service
 *
 * Returns logs of a service
 */
export const LogsOfService = ({ account_id, rule_id, ...props }: LogsOfServiceProps) => (
  <Get<ServiceLogsResponse, void, LogsOfServiceQueryParams, LogsOfServicePathParams>
    path={`/accounts/${account_id}/autostopping/rules/${rule_id}/logs`}
    base={getConfig('lw/api')}
    {...props}
  />
)

export type UseLogsOfServiceProps = Omit<
  UseGetProps<ServiceLogsResponse, void, LogsOfServiceQueryParams, LogsOfServicePathParams>,
  'path'
> &
  LogsOfServicePathParams

/**
 * Logs of a service
 *
 * Returns logs of a service
 */
export const useLogsOfService = ({ account_id, rule_id, ...props }: UseLogsOfServiceProps) =>
  useGet<ServiceLogsResponse, void, LogsOfServiceQueryParams, LogsOfServicePathParams>(
    (paramsInPath: LogsOfServicePathParams) =>
      `/accounts/${paramsInPath.account_id}/autostopping/rules/${paramsInPath.rule_id}/logs`,
    { base: getConfig('lw/api'), pathParams: { account_id, rule_id }, ...props }
  )

export interface RequestsOfServiceQueryParams {
  accountIdentifier: string
}

export interface RequestsOfServicePathParams {
  account_id: string
  rule_id: number
}

export type RequestsOfServiceProps = Omit<
  GetProps<ServiceRequestsResponse, void, RequestsOfServiceQueryParams, RequestsOfServicePathParams>,
  'path'
> &
  RequestsOfServicePathParams

/**
 * Requests of a service
 *
 * Returns requests of a service
 */
export const RequestsOfService = ({ account_id, rule_id, ...props }: RequestsOfServiceProps) => (
  <Get<ServiceRequestsResponse, void, RequestsOfServiceQueryParams, RequestsOfServicePathParams>
    path={`/accounts/${account_id}/autostopping/rules/${rule_id}/requests`}
    base={getConfig('lw/api')}
    {...props}
  />
)

export type UseRequestsOfServiceProps = Omit<
  UseGetProps<ServiceRequestsResponse, void, RequestsOfServiceQueryParams, RequestsOfServicePathParams>,
  'path'
> &
  RequestsOfServicePathParams

/**
 * Requests of a service
 *
 * Returns requests of a service
 */
export const useRequestsOfService = ({ account_id, rule_id, ...props }: UseRequestsOfServiceProps) =>
  useGet<ServiceRequestsResponse, void, RequestsOfServiceQueryParams, RequestsOfServicePathParams>(
    (paramsInPath: RequestsOfServicePathParams) =>
      `/accounts/${paramsInPath.account_id}/autostopping/rules/${paramsInPath.rule_id}/requests`,
    { base: getConfig('lw/api'), pathParams: { account_id, rule_id }, ...props }
  )

export interface AllServiceResourcesQueryParams {
  cloud_account_id: string
  region: string
  accountIdentifier: string
}

export interface AllServiceResourcesPathParams {
  account_id: string
  rule_id: number
}

export type AllServiceResourcesProps = Omit<
  GetProps<AllResourcesOfAccountResponse, void, AllServiceResourcesQueryParams, AllServiceResourcesPathParams>,
  'path'
> &
  AllServiceResourcesPathParams

/**
 * Lists all resources for a service
 *
 * Lists all resources for a service
 */
export const AllServiceResources = ({ account_id, rule_id, ...props }: AllServiceResourcesProps) => (
  <Get<AllResourcesOfAccountResponse, void, AllServiceResourcesQueryParams, AllServiceResourcesPathParams>
    path={`/accounts/${account_id}/autostopping/rules/${rule_id}/resources`}
    base={getConfig('lw/api')}
    {...props}
  />
)

export type UseAllServiceResourcesProps = Omit<
  UseGetProps<AllResourcesOfAccountResponse, void, AllServiceResourcesQueryParams, AllServiceResourcesPathParams>,
  'path'
> &
  AllServiceResourcesPathParams

/**
 * Lists all resources for a service
 *
 * Lists all resources for a service
 */
export const useAllServiceResources = ({ account_id, rule_id, ...props }: UseAllServiceResourcesProps) =>
  useGet<AllResourcesOfAccountResponse, void, AllServiceResourcesQueryParams, AllServiceResourcesPathParams>(
    (paramsInPath: AllServiceResourcesPathParams) =>
      `/accounts/${paramsInPath.account_id}/autostopping/rules/${paramsInPath.rule_id}/resources`,
    { base: getConfig('lw/api'), pathParams: { account_id, rule_id }, ...props }
  )

export interface SavingsOfServiceQueryParams {
  accountIdentifier: string
  from?: string
  to?: string
  group_by?: string
}

export interface SavingsOfServicePathParams {
  account_id: string
  rule_id: number
}

export type SavingsOfServiceProps = Omit<
  GetProps<
    ServiceSavingsResponse | ServiceSavingsGraphResponse,
    void,
    SavingsOfServiceQueryParams,
    SavingsOfServicePathParams
  >,
  'path'
> &
  SavingsOfServicePathParams

/**
 * Savings of a service
 *
 * Returns savings of a service
 */
export const SavingsOfService = ({ account_id, rule_id, ...props }: SavingsOfServiceProps) => (
  <Get<
    ServiceSavingsResponse | ServiceSavingsGraphResponse,
    void,
    SavingsOfServiceQueryParams,
    SavingsOfServicePathParams
  >
    path={`/accounts/${account_id}/autostopping/rules/${rule_id}/savings`}
    base={getConfig('lw/api')}
    {...props}
  />
)

export type UseSavingsOfServiceProps = Omit<
  UseGetProps<
    ServiceSavingsResponse | ServiceSavingsGraphResponse,
    void,
    SavingsOfServiceQueryParams,
    SavingsOfServicePathParams
  >,
  'path'
> &
  SavingsOfServicePathParams

/**
 * Savings of a service
 *
 * Returns savings of a service
 */
export const useSavingsOfService = ({ account_id, rule_id, ...props }: UseSavingsOfServiceProps) =>
  useGet<
    ServiceSavingsResponse | ServiceSavingsGraphResponse,
    void,
    SavingsOfServiceQueryParams,
    SavingsOfServicePathParams
  >(
    (paramsInPath: SavingsOfServicePathParams) =>
      `/accounts/${paramsInPath.account_id}/autostopping/rules/${paramsInPath.rule_id}/savings`,
    { base: getConfig('lw/api'), pathParams: { account_id, rule_id }, ...props }
  )

export interface GetServiceStatsQueryParams {
  accountIdentifier: string
}

export interface GetServiceStatsPathParams {
  account_id: string
  rule_id: number
}

export type GetServiceStatsProps = Omit<
  GetProps<ServiceStatsResponse, void, GetServiceStatsQueryParams, GetServiceStatsPathParams>,
  'path'
> &
  GetServiceStatsPathParams

/**
 * Get statuses of given autostopping rule
 *
 * Returns duration of idle time and down time
 */
export const GetServiceStats = ({ account_id, rule_id, ...props }: GetServiceStatsProps) => (
  <Get<ServiceStatsResponse, void, GetServiceStatsQueryParams, GetServiceStatsPathParams>
    path={`/accounts/${account_id}/autostopping/rules/${rule_id}/stats`}
    base={getConfig('lw/api')}
    {...props}
  />
)

export type UseGetServiceStatsProps = Omit<
  UseGetProps<ServiceStatsResponse, void, GetServiceStatsQueryParams, GetServiceStatsPathParams>,
  'path'
> &
  GetServiceStatsPathParams

/**
 * Get statuses of given autostopping rule
 *
 * Returns duration of idle time and down time
 */
export const useGetServiceStats = ({ account_id, rule_id, ...props }: UseGetServiceStatsProps) =>
  useGet<ServiceStatsResponse, void, GetServiceStatsQueryParams, GetServiceStatsPathParams>(
    (paramsInPath: GetServiceStatsPathParams) =>
      `/accounts/${paramsInPath.account_id}/autostopping/rules/${paramsInPath.rule_id}/stats`,
    { base: getConfig('lw/api'), pathParams: { account_id, rule_id }, ...props }
  )

export interface ToggleAutostoppingRuleQueryParams {
  disable: boolean
  accountIdentifier: string
}

export interface ToggleAutostoppingRulePathParams {
  account_id: string
  rule_id: string
}

export type ToggleAutostoppingRuleProps = Omit<
  MutateProps<ServicesResponse, void, ToggleAutostoppingRuleQueryParams, void, ToggleAutostoppingRulePathParams>,
  'path' | 'verb'
> &
  ToggleAutostoppingRulePathParams

/**
 * Toggle state of Autostopping Rule
 *
 * Toggle state of Autostopping Rule
 */
export const ToggleAutostoppingRule = ({ account_id, rule_id, ...props }: ToggleAutostoppingRuleProps) => (
  <Mutate<ServicesResponse, void, ToggleAutostoppingRuleQueryParams, void, ToggleAutostoppingRulePathParams>
    verb="PUT"
    path={`/accounts/${account_id}/autostopping/rules/${rule_id}/toggle_state`}
    base={getConfig('lw/api')}
    {...props}
  />
)

export type UseToggleAutostoppingRuleProps = Omit<
  UseMutateProps<ServicesResponse, void, ToggleAutostoppingRuleQueryParams, void, ToggleAutostoppingRulePathParams>,
  'path' | 'verb'
> &
  ToggleAutostoppingRulePathParams

/**
 * Toggle state of Autostopping Rule
 *
 * Toggle state of Autostopping Rule
 */
export const useToggleAutostoppingRule = ({ account_id, rule_id, ...props }: UseToggleAutostoppingRuleProps) =>
  useMutate<ServicesResponse, void, ToggleAutostoppingRuleQueryParams, void, ToggleAutostoppingRulePathParams>(
    'PUT',
    (paramsInPath: ToggleAutostoppingRulePathParams) =>
      `/accounts/${paramsInPath.account_id}/autostopping/rules/${paramsInPath.rule_id}/toggle_state`,
    { base: getConfig('lw/api'), pathParams: { account_id, rule_id }, ...props }
  )

export interface AllCertificatesQueryParams {
  cloud_account_id: string
  region: string
  resource_group_name?: string
  accountIdentifier: string
  app_gateway_id?: string
}

export interface AllCertificatesPathParams {
  account_id: string
}

export type AllCertificatesProps = Omit<
  GetProps<AllCertificatesResponse, void, AllCertificatesQueryParams, AllCertificatesPathParams>,
  'path'
> &
  AllCertificatesPathParams

/**
 * Lists all certificates for a cloud account
 *
 * Returns all certificates for a cloud account
 */
export const AllCertificates = ({ account_id, ...props }: AllCertificatesProps) => (
  <Get<AllCertificatesResponse, void, AllCertificatesQueryParams, AllCertificatesPathParams>
    path={`/accounts/${account_id}/certificates`}
    base={getConfig('lw/api')}
    {...props}
  />
)

export type UseAllCertificatesProps = Omit<
  UseGetProps<AllCertificatesResponse, void, AllCertificatesQueryParams, AllCertificatesPathParams>,
  'path'
> &
  AllCertificatesPathParams

/**
 * Lists all certificates for a cloud account
 *
 * Returns all certificates for a cloud account
 */
export const useAllCertificates = ({ account_id, ...props }: UseAllCertificatesProps) =>
  useGet<AllCertificatesResponse, void, AllCertificatesQueryParams, AllCertificatesPathParams>(
    (paramsInPath: AllCertificatesPathParams) => `/accounts/${paramsInPath.account_id}/certificates`,
    { base: getConfig('lw/api'), pathParams: { account_id }, ...props }
  )

export interface GetCloudFormationTemplateQueryParams {
  accountIdentifier: string
}

export interface GetCloudFormationTemplatePathParams {
  account_id: string
}

export type GetCloudFormationTemplateProps = Omit<
  GetProps<CFTResponse, void, GetCloudFormationTemplateQueryParams, GetCloudFormationTemplatePathParams>,
  'path'
> &
  GetCloudFormationTemplatePathParams

/**
 * Cloud formation template path
 *
 * Gets the cloud formation template path
 */
export const GetCloudFormationTemplate = ({ account_id, ...props }: GetCloudFormationTemplateProps) => (
  <Get<CFTResponse, void, GetCloudFormationTemplateQueryParams, GetCloudFormationTemplatePathParams>
    path={`/accounts/${account_id}/cft_path`}
    base={getConfig('lw/api')}
    {...props}
  />
)

export type UseGetCloudFormationTemplateProps = Omit<
  UseGetProps<CFTResponse, void, GetCloudFormationTemplateQueryParams, GetCloudFormationTemplatePathParams>,
  'path'
> &
  GetCloudFormationTemplatePathParams

/**
 * Cloud formation template path
 *
 * Gets the cloud formation template path
 */
export const useGetCloudFormationTemplate = ({ account_id, ...props }: UseGetCloudFormationTemplateProps) =>
  useGet<CFTResponse, void, GetCloudFormationTemplateQueryParams, GetCloudFormationTemplatePathParams>(
    (paramsInPath: GetCloudFormationTemplatePathParams) => `/accounts/${paramsInPath.account_id}/cft_path`,
    { base: getConfig('lw/api'), pathParams: { account_id }, ...props }
  )

export interface GetContainerClustersOfRegionQueryParams {
  cloud_account_id: string
  accountIdentifier: string
  region: string
}

export interface GetContainerClustersOfRegionPathParams {
  account_id: string
}

export type GetContainerClustersOfRegionProps = Omit<
  GetProps<
    ContainerClustersResponse,
    void,
    GetContainerClustersOfRegionQueryParams,
    GetContainerClustersOfRegionPathParams
  >,
  'path'
> &
  GetContainerClustersOfRegionPathParams

/**
 * Container clusters of region
 *
 * Get all clusters of container service in the region
 */
export const GetContainerClustersOfRegion = ({ account_id, ...props }: GetContainerClustersOfRegionProps) => (
  <Get<ContainerClustersResponse, void, GetContainerClustersOfRegionQueryParams, GetContainerClustersOfRegionPathParams>
    path={`/accounts/${account_id}/container_services/clusters`}
    base={getConfig('lw/api')}
    {...props}
  />
)

export type UseGetContainerClustersOfRegionProps = Omit<
  UseGetProps<
    ContainerClustersResponse,
    void,
    GetContainerClustersOfRegionQueryParams,
    GetContainerClustersOfRegionPathParams
  >,
  'path'
> &
  GetContainerClustersOfRegionPathParams

/**
 * Container clusters of region
 *
 * Get all clusters of container service in the region
 */
export const useGetContainerClustersOfRegion = ({ account_id, ...props }: UseGetContainerClustersOfRegionProps) =>
  useGet<
    ContainerClustersResponse,
    void,
    GetContainerClustersOfRegionQueryParams,
    GetContainerClustersOfRegionPathParams
  >(
    (paramsInPath: GetContainerClustersOfRegionPathParams) =>
      `/accounts/${paramsInPath.account_id}/container_services/clusters`,
    { base: getConfig('lw/api'), pathParams: { account_id }, ...props }
  )

export interface ListOfServicesInContainerServiceClusterQueryParams {
  cloud_account_id: string
  accountIdentifier: string
  region: string
}

export interface ListOfServicesInContainerServiceClusterPathParams {
  account_id: string
  /**
   * name of the cluster
   */
  cluster_name: string
}

export type ListOfServicesInContainerServiceClusterProps = Omit<
  GetProps<
    AllContainerServiceServicesResponse,
    void,
    ListOfServicesInContainerServiceClusterQueryParams,
    ListOfServicesInContainerServiceClusterPathParams
  >,
  'path'
> &
  ListOfServicesInContainerServiceClusterPathParams

/**
 * List of services belonging to cluster of container service
 *
 * Get list of services belonging to the cluster of container service
 */
export const ListOfServicesInContainerServiceCluster = ({
  account_id,
  cluster_name,
  ...props
}: ListOfServicesInContainerServiceClusterProps) => (
  <Get<
    AllContainerServiceServicesResponse,
    void,
    ListOfServicesInContainerServiceClusterQueryParams,
    ListOfServicesInContainerServiceClusterPathParams
  >
    path={`/accounts/${account_id}/container_services/clusters/${cluster_name}/services`}
    base={getConfig('lw/api')}
    {...props}
  />
)

export type UseListOfServicesInContainerServiceClusterProps = Omit<
  UseGetProps<
    AllContainerServiceServicesResponse,
    void,
    ListOfServicesInContainerServiceClusterQueryParams,
    ListOfServicesInContainerServiceClusterPathParams
  >,
  'path'
> &
  ListOfServicesInContainerServiceClusterPathParams

/**
 * List of services belonging to cluster of container service
 *
 * Get list of services belonging to the cluster of container service
 */
export const useListOfServicesInContainerServiceCluster = ({
  account_id,
  cluster_name,
  ...props
}: UseListOfServicesInContainerServiceClusterProps) =>
  useGet<
    AllContainerServiceServicesResponse,
    void,
    ListOfServicesInContainerServiceClusterQueryParams,
    ListOfServicesInContainerServiceClusterPathParams
  >(
    (paramsInPath: ListOfServicesInContainerServiceClusterPathParams) =>
      `/accounts/${paramsInPath.account_id}/container_services/clusters/${paramsInPath.cluster_name}/services`,
    { base: getConfig('lw/api'), pathParams: { account_id, cluster_name }, ...props }
  )

export interface DescribeServiceInContainerServiceClusterQueryParams {
  cloud_account_id: string
  accountIdentifier: string
  region: string
}

export interface DescribeServiceInContainerServiceClusterPathParams {
  account_id: string
  /**
   * name of the cluster
   */
  cluster_name: string
  /**
   * name of the service
   */
  service_name: string
}

export type DescribeServiceInContainerServiceClusterProps = Omit<
  GetProps<
    DescribeServiceOfContainerServicesResponse,
    void,
    DescribeServiceInContainerServiceClusterQueryParams,
    DescribeServiceInContainerServiceClusterPathParams
  >,
  'path'
> &
  DescribeServiceInContainerServiceClusterPathParams

/**
 * Details of service in container service
 *
 * Details of service in container service
 */
export const DescribeServiceInContainerServiceCluster = ({
  account_id,
  cluster_name,
  service_name,
  ...props
}: DescribeServiceInContainerServiceClusterProps) => (
  <Get<
    DescribeServiceOfContainerServicesResponse,
    void,
    DescribeServiceInContainerServiceClusterQueryParams,
    DescribeServiceInContainerServiceClusterPathParams
  >
    path={`/accounts/${account_id}/container_services/clusters/${cluster_name}/services/${service_name}`}
    base={getConfig('lw/api')}
    {...props}
  />
)

export type UseDescribeServiceInContainerServiceClusterProps = Omit<
  UseGetProps<
    DescribeServiceOfContainerServicesResponse,
    void,
    DescribeServiceInContainerServiceClusterQueryParams,
    DescribeServiceInContainerServiceClusterPathParams
  >,
  'path'
> &
  DescribeServiceInContainerServiceClusterPathParams

/**
 * Details of service in container service
 *
 * Details of service in container service
 */
export const useDescribeServiceInContainerServiceCluster = ({
  account_id,
  cluster_name,
  service_name,
  ...props
}: UseDescribeServiceInContainerServiceClusterProps) =>
  useGet<
    DescribeServiceOfContainerServicesResponse,
    void,
    DescribeServiceInContainerServiceClusterQueryParams,
    DescribeServiceInContainerServiceClusterPathParams
  >(
    (paramsInPath: DescribeServiceInContainerServiceClusterPathParams) =>
      `/accounts/${paramsInPath.account_id}/container_services/clusters/${paramsInPath.cluster_name}/services/${paramsInPath.service_name}`,
    { base: getConfig('lw/api'), pathParams: { account_id, cluster_name, service_name }, ...props }
  )

export interface AllExecutionRolesQueryParams {
  cloud_account_id: string
  accountIdentifier: string
}

export interface AllExecutionRolesPathParams {
  account_id: string
}

export type AllExecutionRolesProps = Omit<
  GetProps<AllExecutionRolesResponse, void, AllExecutionRolesQueryParams, AllExecutionRolesPathParams>,
  'path'
> &
  AllExecutionRolesPathParams

/**
 * Lists all executionRoles for a cloud account
 *
 * Returns all executionRoles for a cloud account
 */
export const AllExecutionRoles = ({ account_id, ...props }: AllExecutionRolesProps) => (
  <Get<AllExecutionRolesResponse, void, AllExecutionRolesQueryParams, AllExecutionRolesPathParams>
    path={`/accounts/${account_id}/execution_roles`}
    base={getConfig('lw/api')}
    {...props}
  />
)

export type UseAllExecutionRolesProps = Omit<
  UseGetProps<AllExecutionRolesResponse, void, AllExecutionRolesQueryParams, AllExecutionRolesPathParams>,
  'path'
> &
  AllExecutionRolesPathParams

/**
 * Lists all executionRoles for a cloud account
 *
 * Returns all executionRoles for a cloud account
 */
export const useAllExecutionRoles = ({ account_id, ...props }: UseAllExecutionRolesProps) =>
  useGet<AllExecutionRolesResponse, void, AllExecutionRolesQueryParams, AllExecutionRolesPathParams>(
    (paramsInPath: AllExecutionRolesPathParams) => `/accounts/${paramsInPath.account_id}/execution_roles`,
    { base: getConfig('lw/api'), pathParams: { account_id }, ...props }
  )

export interface AllHostedZonesQueryParams {
  cloud_account_id: string
  region: string
  accountIdentifier: string
  domain?: string
}

export interface AllHostedZonesPathParams {
  account_id: string
}

export type AllHostedZonesProps = Omit<
  GetProps<AllHostedZonesResponse, void, AllHostedZonesQueryParams, AllHostedZonesPathParams>,
  'path'
> &
  AllHostedZonesPathParams

/**
 * Lists all hostedZones for a cloud account
 *
 * Returns all hostedZones for a cloud account
 */
export const AllHostedZones = ({ account_id, ...props }: AllHostedZonesProps) => (
  <Get<AllHostedZonesResponse, void, AllHostedZonesQueryParams, AllHostedZonesPathParams>
    path={`/accounts/${account_id}/hosted_zones`}
    base={getConfig('lw/api')}
    {...props}
  />
)

export type UseAllHostedZonesProps = Omit<
  UseGetProps<AllHostedZonesResponse, void, AllHostedZonesQueryParams, AllHostedZonesPathParams>,
  'path'
> &
  AllHostedZonesPathParams

/**
 * Lists all hostedZones for a cloud account
 *
 * Returns all hostedZones for a cloud account
 */
export const useAllHostedZones = ({ account_id, ...props }: UseAllHostedZonesProps) =>
  useGet<AllHostedZonesResponse, void, AllHostedZonesQueryParams, AllHostedZonesPathParams>(
    (paramsInPath: AllHostedZonesPathParams) => `/accounts/${paramsInPath.account_id}/hosted_zones`,
    { base: getConfig('lw/api'), pathParams: { account_id }, ...props }
  )

export interface SecurityGroupsOfInstancesResponse {}

export interface SecurityGroupsOfInstancesQueryParams {
  cloud_account_id: string
  accountIdentifier: string
}

export interface SecurityGroupsOfInstancesPathParams {
  account_id: string
}

export type SecurityGroupsOfInstancesProps = Omit<
  MutateProps<
    SecurityGroupsOfInstancesResponse,
    void,
    SecurityGroupsOfInstancesQueryParams,
    SGResourceFilterBody,
    SecurityGroupsOfInstancesPathParams
  >,
  'path' | 'verb'
> &
  SecurityGroupsOfInstancesPathParams

/**
 * Network security groups of an instance
 *
 * Returns all the network security group definitions
 */
export const SecurityGroupsOfInstances = ({ account_id, ...props }: SecurityGroupsOfInstancesProps) => (
  <Mutate<
    SecurityGroupsOfInstancesResponse,
    void,
    SecurityGroupsOfInstancesQueryParams,
    SGResourceFilterBody,
    SecurityGroupsOfInstancesPathParams
  >
    verb="POST"
    path={`/accounts/${account_id}/instance_nsg`}
    base={getConfig('lw/api')}
    {...props}
  />
)

export type UseSecurityGroupsOfInstancesProps = Omit<
  UseMutateProps<
    SecurityGroupsOfInstancesResponse,
    void,
    SecurityGroupsOfInstancesQueryParams,
    SGResourceFilterBody,
    SecurityGroupsOfInstancesPathParams
  >,
  'path' | 'verb'
> &
  SecurityGroupsOfInstancesPathParams

/**
 * Network security groups of an instance
 *
 * Returns all the network security group definitions
 */
export const useSecurityGroupsOfInstances = ({ account_id, ...props }: UseSecurityGroupsOfInstancesProps) =>
  useMutate<
    SecurityGroupsOfInstancesResponse,
    void,
    SecurityGroupsOfInstancesQueryParams,
    SGResourceFilterBody,
    SecurityGroupsOfInstancesPathParams
  >(
    'POST',
    (paramsInPath: SecurityGroupsOfInstancesPathParams) => `/accounts/${paramsInPath.account_id}/instance_nsg`,
    { base: getConfig('lw/api'), pathParams: { account_id }, ...props }
  )

export interface AllSecurityGroupsQueryParams {
  cloud_account_id: string
  region: string
  vpc_id: string
  accountIdentifier: string
}

export interface AllSecurityGroupsPathParams {
  account_id: string
}

export type AllSecurityGroupsProps = Omit<
  GetProps<AllSecurityGroupsResponse, void, AllSecurityGroupsQueryParams, AllSecurityGroupsPathParams>,
  'path'
> &
  AllSecurityGroupsPathParams

/**
 * Lists all securityGroups for a cloud account
 *
 * Returns all securityGroups for a cloud account
 */
export const AllSecurityGroups = ({ account_id, ...props }: AllSecurityGroupsProps) => (
  <Get<AllSecurityGroupsResponse, void, AllSecurityGroupsQueryParams, AllSecurityGroupsPathParams>
    path={`/accounts/${account_id}/network_security_groups`}
    base={getConfig('lw/api')}
    {...props}
  />
)

export type UseAllSecurityGroupsProps = Omit<
  UseGetProps<AllSecurityGroupsResponse, void, AllSecurityGroupsQueryParams, AllSecurityGroupsPathParams>,
  'path'
> &
  AllSecurityGroupsPathParams

/**
 * Lists all securityGroups for a cloud account
 *
 * Returns all securityGroups for a cloud account
 */
export const useAllSecurityGroups = ({ account_id, ...props }: UseAllSecurityGroupsProps) =>
  useGet<AllSecurityGroupsResponse, void, AllSecurityGroupsQueryParams, AllSecurityGroupsPathParams>(
    (paramsInPath: AllSecurityGroupsPathParams) => `/accounts/${paramsInPath.account_id}/network_security_groups`,
    { base: getConfig('lw/api'), pathParams: { account_id }, ...props }
  )

export interface AllPublicIpsQueryParams {
  cloud_account_id: string
  region: string
  vpc: string
  resource_group_name: string
  accountIdentifier: string
}

export interface AllPublicIpsPathParams {
  account_id: string
}

export type AllPublicIpsProps = Omit<
  GetProps<AllPublicIpsResponse, void, AllPublicIpsQueryParams, AllPublicIpsPathParams>,
  'path'
> &
  AllPublicIpsPathParams

/**
 * Lists all public IPs for a cloud account
 *
 * Returns all public IPs for a cloud account
 */
export const AllPublicIps = ({ account_id, ...props }: AllPublicIpsProps) => (
  <Get<AllPublicIpsResponse, void, AllPublicIpsQueryParams, AllPublicIpsPathParams>
    path={`/accounts/${account_id}/public_ips`}
    base={getConfig('lw/api')}
    {...props}
  />
)

export type UseAllPublicIpsProps = Omit<
  UseGetProps<AllPublicIpsResponse, void, AllPublicIpsQueryParams, AllPublicIpsPathParams>,
  'path'
> &
  AllPublicIpsPathParams

/**
 * Lists all public IPs for a cloud account
 *
 * Returns all public IPs for a cloud account
 */
export const useAllPublicIps = ({ account_id, ...props }: UseAllPublicIpsProps) =>
  useGet<AllPublicIpsResponse, void, AllPublicIpsQueryParams, AllPublicIpsPathParams>(
    (paramsInPath: AllPublicIpsPathParams) => `/accounts/${paramsInPath.account_id}/public_ips`,
    { base: getConfig('lw/api'), pathParams: { account_id }, ...props }
  )

export interface AllRegionsQueryParams {
  cloud_account_id: string
  accountIdentifier: string
}

export interface AllRegionsPathParams {
  account_id: string
}

export type AllRegionsProps = Omit<
  GetProps<AllRegionsResponse, void, AllRegionsQueryParams, AllRegionsPathParams>,
  'path'
> &
  AllRegionsPathParams

/**
 * Lists all regions for a cloud account
 *
 * Returns all regions for a cloud account
 */
export const AllRegions = ({ account_id, ...props }: AllRegionsProps) => (
  <Get<AllRegionsResponse, void, AllRegionsQueryParams, AllRegionsPathParams>
    path={`/accounts/${account_id}/regions`}
    base={getConfig('lw/api')}
    {...props}
  />
)

export type UseAllRegionsProps = Omit<
  UseGetProps<AllRegionsResponse, void, AllRegionsQueryParams, AllRegionsPathParams>,
  'path'
> &
  AllRegionsPathParams

/**
 * Lists all regions for a cloud account
 *
 * Returns all regions for a cloud account
 */
export const useAllRegions = ({ account_id, ...props }: UseAllRegionsProps) =>
  useGet<AllRegionsResponse, void, AllRegionsQueryParams, AllRegionsPathParams>(
    (paramsInPath: AllRegionsPathParams) => `/accounts/${paramsInPath.account_id}/regions`,
    { base: getConfig('lw/api'), pathParams: { account_id }, ...props }
  )

export interface GatewaySessionReportQueryParams {
  accountIdentifier: string
}

export interface GatewaySessionReportPathParams {
  account_id: string
}

export type GatewaySessionReportProps = Omit<
  MutateProps<
    GatewaySessionReportResponse,
    void,
    GatewaySessionReportQueryParams,
    ReportRequestBody,
    GatewaySessionReportPathParams
  >,
  'path' | 'verb'
> &
  GatewaySessionReportPathParams

/**
 * Get GatewaySessionReport
 *
 * Get GatewaySessionReport
 */
export const GatewaySessionReport = ({ account_id, ...props }: GatewaySessionReportProps) => (
  <Mutate<
    GatewaySessionReportResponse,
    void,
    GatewaySessionReportQueryParams,
    ReportRequestBody,
    GatewaySessionReportPathParams
  >
    verb="POST"
    path={`/accounts/${account_id}/reports`}
    base={getConfig('lw/api')}
    {...props}
  />
)

export type UseGatewaySessionReportProps = Omit<
  UseMutateProps<
    GatewaySessionReportResponse,
    void,
    GatewaySessionReportQueryParams,
    ReportRequestBody,
    GatewaySessionReportPathParams
  >,
  'path' | 'verb'
> &
  GatewaySessionReportPathParams

/**
 * Get GatewaySessionReport
 *
 * Get GatewaySessionReport
 */
export const useGatewaySessionReport = ({ account_id, ...props }: UseGatewaySessionReportProps) =>
  useMutate<
    GatewaySessionReportResponse,
    void,
    GatewaySessionReportQueryParams,
    ReportRequestBody,
    GatewaySessionReportPathParams
  >('POST', (paramsInPath: GatewaySessionReportPathParams) => `/accounts/${paramsInPath.account_id}/reports`, {
    base: getConfig('lw/api'),
    pathParams: { account_id },
    ...props
  })

export interface AllResourceGroupsQueryParams {
  cloud_account_id: string
  accountIdentifier: string
}

export interface AllResourceGroupsPathParams {
  account_id: string
}

export type AllResourceGroupsProps = Omit<
  GetProps<AllResourceGroupsResponse, void, AllResourceGroupsQueryParams, AllResourceGroupsPathParams>,
  'path'
> &
  AllResourceGroupsPathParams

/**
 * Lists all resource groups for a cloud account
 *
 * Returns all resource groups for a cloud account
 */
export const AllResourceGroups = ({ account_id, ...props }: AllResourceGroupsProps) => (
  <Get<AllResourceGroupsResponse, void, AllResourceGroupsQueryParams, AllResourceGroupsPathParams>
    path={`/accounts/${account_id}/resource_groups`}
    base={getConfig('lw/api')}
    {...props}
  />
)

export type UseAllResourceGroupsProps = Omit<
  UseGetProps<AllResourceGroupsResponse, void, AllResourceGroupsQueryParams, AllResourceGroupsPathParams>,
  'path'
> &
  AllResourceGroupsPathParams

/**
 * Lists all resource groups for a cloud account
 *
 * Returns all resource groups for a cloud account
 */
export const useAllResourceGroups = ({ account_id, ...props }: UseAllResourceGroupsProps) =>
  useGet<AllResourceGroupsResponse, void, AllResourceGroupsQueryParams, AllResourceGroupsPathParams>(
    (paramsInPath: AllResourceGroupsPathParams) => `/accounts/${paramsInPath.account_id}/resource_groups`,
    { base: getConfig('lw/api'), pathParams: { account_id }, ...props }
  )

export interface AllResourcesOfAccountQueryParams {
  cloud_account_id: string
  type: string
  accountIdentifier: string
}

export interface AllResourcesOfAccountPathParams {
  account_id: string
}

export type AllResourcesOfAccountProps = Omit<
  MutateProps<
    AllResourcesOfAccountResponse,
    void,
    AllResourcesOfAccountQueryParams,
    ResourceFilterBody,
    AllResourcesOfAccountPathParams
  >,
  'path' | 'verb'
> &
  AllResourcesOfAccountPathParams

/**
 * Lists all resources under an account
 *
 * Returns all resources under an account matching the given filter
 */
export const AllResourcesOfAccount = ({ account_id, ...props }: AllResourcesOfAccountProps) => (
  <Mutate<
    AllResourcesOfAccountResponse,
    void,
    AllResourcesOfAccountQueryParams,
    ResourceFilterBody,
    AllResourcesOfAccountPathParams
  >
    verb="POST"
    path={`/accounts/${account_id}/resources`}
    base={getConfig('lw/api')}
    {...props}
  />
)

export type UseAllResourcesOfAccountProps = Omit<
  UseMutateProps<
    AllResourcesOfAccountResponse,
    void,
    AllResourcesOfAccountQueryParams,
    ResourceFilterBody,
    AllResourcesOfAccountPathParams
  >,
  'path' | 'verb'
> &
  AllResourcesOfAccountPathParams

/**
 * Lists all resources under an account
 *
 * Returns all resources under an account matching the given filter
 */
export const useAllResourcesOfAccount = ({ account_id, ...props }: UseAllResourcesOfAccountProps) =>
  useMutate<
    AllResourcesOfAccountResponse,
    void,
    AllResourcesOfAccountQueryParams,
    ResourceFilterBody,
    AllResourcesOfAccountPathParams
  >('POST', (paramsInPath: AllResourcesOfAccountPathParams) => `/accounts/${paramsInPath.account_id}/resources`, {
    base: getConfig('lw/api'),
    pathParams: { account_id },
    ...props
  })

export interface GetAllASGsQueryParams {
  cloud_account_id: string
  accountIdentifier: string
}

export interface GetAllASGsPathParams {
  account_id: string
}

export type GetAllASGsProps = Omit<
  MutateProps<AllASGResponse, void, GetAllASGsQueryParams, ASGResourceFilterBody, GetAllASGsPathParams>,
  'path' | 'verb'
> &
  GetAllASGsPathParams

/**
 * Get all auto scaling groups
 *
 * Get all auto scaling groups satisfying the given filter
 */
export const GetAllASGs = ({ account_id, ...props }: GetAllASGsProps) => (
  <Mutate<AllASGResponse, void, GetAllASGsQueryParams, ASGResourceFilterBody, GetAllASGsPathParams>
    verb="POST"
    path={`/accounts/${account_id}/scaling_groups`}
    base={getConfig('lw/api')}
    {...props}
  />
)

export type UseGetAllASGsProps = Omit<
  UseMutateProps<AllASGResponse, void, GetAllASGsQueryParams, ASGResourceFilterBody, GetAllASGsPathParams>,
  'path' | 'verb'
> &
  GetAllASGsPathParams

/**
 * Get all auto scaling groups
 *
 * Get all auto scaling groups satisfying the given filter
 */
export const useGetAllASGs = ({ account_id, ...props }: UseGetAllASGsProps) =>
  useMutate<AllASGResponse, void, GetAllASGsQueryParams, ASGResourceFilterBody, GetAllASGsPathParams>(
    'POST',
    (paramsInPath: GetAllASGsPathParams) => `/accounts/${paramsInPath.account_id}/scaling_groups`,
    { base: getConfig('lw/api'), pathParams: { account_id }, ...props }
  )

export interface ListStaticSchedulesQueryParams {
  cloud_account_id: string
  accountIdentifier: string
  res_id: string
  res_type: string
}

export interface ListStaticSchedulesPathParams {
  account_id: string
}

export type ListStaticSchedulesProps = Omit<
  GetProps<StaticSchedulesListResponse, void, ListStaticSchedulesQueryParams, ListStaticSchedulesPathParams>,
  'path'
> &
  ListStaticSchedulesPathParams

/**
 * List all static schedules
 *
 * List all static schedules
 */
export const ListStaticSchedules = ({ account_id, ...props }: ListStaticSchedulesProps) => (
  <Get<StaticSchedulesListResponse, void, ListStaticSchedulesQueryParams, ListStaticSchedulesPathParams>
    path={`/accounts/${account_id}/schedules`}
    base={getConfig('lw/api')}
    {...props}
  />
)

export type UseListStaticSchedulesProps = Omit<
  UseGetProps<StaticSchedulesListResponse, void, ListStaticSchedulesQueryParams, ListStaticSchedulesPathParams>,
  'path'
> &
  ListStaticSchedulesPathParams

/**
 * List all static schedules
 *
 * List all static schedules
 */
export const useListStaticSchedules = ({ account_id, ...props }: UseListStaticSchedulesProps) =>
  useGet<StaticSchedulesListResponse, void, ListStaticSchedulesQueryParams, ListStaticSchedulesPathParams>(
    (paramsInPath: ListStaticSchedulesPathParams) => `/accounts/${paramsInPath.account_id}/schedules`,
    { base: getConfig('lw/api'), pathParams: { account_id }, ...props }
  )

export interface CreateStaticSchedulesQueryParams {
  cloud_account_id: string
  accountIdentifier: string
}

export interface CreateStaticSchedulesPathParams {
  account_id: string
}

export type CreateStaticSchedulesProps = Omit<
  MutateProps<
    StaticSchedule,
    void,
    CreateStaticSchedulesQueryParams,
    SaveStaticSchedulesRequest,
    CreateStaticSchedulesPathParams
  >,
  'path' | 'verb'
> &
  CreateStaticSchedulesPathParams

/**
 * Create static schedules
 *
 * For creating static schedules to run resources based on the schedule
 */
export const CreateStaticSchedules = ({ account_id, ...props }: CreateStaticSchedulesProps) => (
  <Mutate<
    StaticSchedule,
    void,
    CreateStaticSchedulesQueryParams,
    SaveStaticSchedulesRequest,
    CreateStaticSchedulesPathParams
  >
    verb="POST"
    path={`/accounts/${account_id}/schedules`}
    base={getConfig('lw/api')}
    {...props}
  />
)

export type UseCreateStaticSchedulesProps = Omit<
  UseMutateProps<
    StaticSchedule,
    void,
    CreateStaticSchedulesQueryParams,
    SaveStaticSchedulesRequest,
    CreateStaticSchedulesPathParams
  >,
  'path' | 'verb'
> &
  CreateStaticSchedulesPathParams

/**
 * Create static schedules
 *
 * For creating static schedules to run resources based on the schedule
 */
export const useCreateStaticSchedules = ({ account_id, ...props }: UseCreateStaticSchedulesProps) =>
  useMutate<
    StaticSchedule,
    void,
    CreateStaticSchedulesQueryParams,
    SaveStaticSchedulesRequest,
    CreateStaticSchedulesPathParams
  >('POST', (paramsInPath: CreateStaticSchedulesPathParams) => `/accounts/${paramsInPath.account_id}/schedules`, {
    base: getConfig('lw/api'),
    pathParams: { account_id },
    ...props
  })

export interface ValidateStaticScheduleListResponse {
  response?: string
}

export interface ValidateStaticScheduleListQueryParams {
  accountIdentifier: string
}

export interface ValidateStaticScheduleListPathParams {
  account_id: string
}

export type ValidateStaticScheduleListProps = Omit<
  MutateProps<
    ValidateStaticScheduleListResponse,
    unknown,
    ValidateStaticScheduleListQueryParams,
    ValidateSchedulesBody,
    ValidateStaticScheduleListPathParams
  >,
  'path' | 'verb'
> &
  ValidateStaticScheduleListPathParams

/**
 * Validates a static schedule list
 *
 * Validates a static schedule list
 */
export const ValidateStaticScheduleList = ({ account_id, ...props }: ValidateStaticScheduleListProps) => (
  <Mutate<
    ValidateStaticScheduleListResponse,
    unknown,
    ValidateStaticScheduleListQueryParams,
    ValidateSchedulesBody,
    ValidateStaticScheduleListPathParams
  >
    verb="POST"
    path={`/accounts/${account_id}/schedules/validate`}
    base={getConfig('lw/api')}
    {...props}
  />
)

export type UseValidateStaticScheduleListProps = Omit<
  UseMutateProps<
    ValidateStaticScheduleListResponse,
    unknown,
    ValidateStaticScheduleListQueryParams,
    ValidateSchedulesBody,
    ValidateStaticScheduleListPathParams
  >,
  'path' | 'verb'
> &
  ValidateStaticScheduleListPathParams

/**
 * Validates a static schedule list
 *
 * Validates a static schedule list
 */
export const useValidateStaticScheduleList = ({ account_id, ...props }: UseValidateStaticScheduleListProps) =>
  useMutate<
    ValidateStaticScheduleListResponse,
    unknown,
    ValidateStaticScheduleListQueryParams,
    ValidateSchedulesBody,
    ValidateStaticScheduleListPathParams
  >(
    'POST',
    (paramsInPath: ValidateStaticScheduleListPathParams) => `/accounts/${paramsInPath.account_id}/schedules/validate`,
    { base: getConfig('lw/api'), pathParams: { account_id }, ...props }
  )

export interface DeleteStaticScheduleResponse {
  response?: string
}

export interface DeleteStaticScheduleQueryParams {
  accountIdentifier: string
}

export interface DeleteStaticSchedulePathParams {
  account_id: string
}

export type DeleteStaticScheduleProps = Omit<
  MutateProps<
    DeleteStaticScheduleResponse,
    unknown,
    DeleteStaticScheduleQueryParams,
    number,
    DeleteStaticSchedulePathParams
  >,
  'path' | 'verb'
> &
  DeleteStaticSchedulePathParams

/**
 * Delete a static schedule
 *
 * Delete a static schedule
 */
export const DeleteStaticSchedule = ({ account_id, ...props }: DeleteStaticScheduleProps) => (
  <Mutate<
    DeleteStaticScheduleResponse,
    unknown,
    DeleteStaticScheduleQueryParams,
    number,
    DeleteStaticSchedulePathParams
  >
    verb="DELETE"
    path={`/accounts/${account_id}/schedules`}
    base={getConfig('lw/api')}
    {...props}
  />
)

export type UseDeleteStaticScheduleProps = Omit<
  UseMutateProps<
    DeleteStaticScheduleResponse,
    unknown,
    DeleteStaticScheduleQueryParams,
    number,
    DeleteStaticSchedulePathParams
  >,
  'path' | 'verb'
> &
  DeleteStaticSchedulePathParams

/**
 * Delete a static schedule
 *
 * Delete a static schedule
 */
export const useDeleteStaticSchedule = ({ account_id, ...props }: UseDeleteStaticScheduleProps) =>
  useMutate<
    DeleteStaticScheduleResponse,
    unknown,
    DeleteStaticScheduleQueryParams,
    number,
    DeleteStaticSchedulePathParams
  >('DELETE', (paramsInPath: DeleteStaticSchedulePathParams) => `/accounts/${paramsInPath.account_id}/schedules`, {
    base: getConfig('lw/api'),
    pathParams: { account_id },
    ...props
  })

export interface AllSubnetsQueryParams {
  cloud_account_id: string
  region: string
  vpc: string
  resource_group_name?: string
  accountIdentifier: string
}

export interface AllSubnetsPathParams {
  account_id: string
}

export type AllSubnetsProps = Omit<
  GetProps<AllSubnetsResponse, void, AllSubnetsQueryParams, AllSubnetsPathParams>,
  'path'
> &
  AllSubnetsPathParams

/**
 * Lists all subnets for a cloud account
 *
 * Returns all subnets for a cloud account
 */
export const AllSubnets = ({ account_id, ...props }: AllSubnetsProps) => (
  <Get<AllSubnetsResponse, void, AllSubnetsQueryParams, AllSubnetsPathParams>
    path={`/accounts/${account_id}/subnets`}
    base={getConfig('lw/api')}
    {...props}
  />
)

export type UseAllSubnetsProps = Omit<
  UseGetProps<AllSubnetsResponse, void, AllSubnetsQueryParams, AllSubnetsPathParams>,
  'path'
> &
  AllSubnetsPathParams

/**
 * Lists all subnets for a cloud account
 *
 * Returns all subnets for a cloud account
 */
export const useAllSubnets = ({ account_id, ...props }: UseAllSubnetsProps) =>
  useGet<AllSubnetsResponse, void, AllSubnetsQueryParams, AllSubnetsPathParams>(
    (paramsInPath: AllSubnetsPathParams) => `/accounts/${paramsInPath.account_id}/subnets`,
    { base: getConfig('lw/api'), pathParams: { account_id }, ...props }
  )

export interface AllVPCsQueryParams {
  cloud_account_id: string
  region: string
  resource_group_name?: string
  accountIdentifier: string
}

export interface AllVPCsPathParams {
  account_id: string
}

export type AllVPCsProps = Omit<GetProps<AllVPCsResponse, void, AllVPCsQueryParams, AllVPCsPathParams>, 'path'> &
  AllVPCsPathParams

/**
 * Lists all vpcs for a cloud account
 *
 * Returns all vpcs for a cloud account
 */
export const AllVPCs = ({ account_id, ...props }: AllVPCsProps) => (
  <Get<AllVPCsResponse, void, AllVPCsQueryParams, AllVPCsPathParams>
    path={`/accounts/${account_id}/virtual_networks`}
    base={getConfig('lw/api')}
    {...props}
  />
)

export type UseAllVPCsProps = Omit<UseGetProps<AllVPCsResponse, void, AllVPCsQueryParams, AllVPCsPathParams>, 'path'> &
  AllVPCsPathParams

/**
 * Lists all vpcs for a cloud account
 *
 * Returns all vpcs for a cloud account
 */
export const useAllVPCs = ({ account_id, ...props }: UseAllVPCsProps) =>
  useGet<AllVPCsResponse, void, AllVPCsQueryParams, AllVPCsPathParams>(
    (paramsInPath: AllVPCsPathParams) => `/accounts/${paramsInPath.account_id}/virtual_networks`,
    { base: getConfig('lw/api'), pathParams: { account_id }, ...props }
  )

export type GetAppIdProps = Omit<GetProps<AppIdResponse, void, void, void>, 'path'>

/**
 * Get Azure application ID
 *
 * Get Azure application ID
 */
export const GetAppId = (props: GetAppIdProps) => (
  <Get<AppIdResponse, void, void, void> path={`/app_id`} base={getConfig('lw/api')} {...props} />
)

export type UseGetAppIdProps = Omit<UseGetProps<AppIdResponse, void, void, void>, 'path'>

/**
 * Get Azure application ID
 *
 * Get Azure application ID
 */
export const useGetAppId = (props: UseGetAppIdProps) =>
  useGet<AppIdResponse, void, void, void>(`/app_id`, { base: getConfig('lw/api'), ...props })
